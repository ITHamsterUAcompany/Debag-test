from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ChatPermissions
from aiogram.filters import Command
from datetime import datetime, timedelta
from contextlib import suppress
import asyncio
import logging
from Bot_config import warnings, admin_chat_id, BOT_TOKEN

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
bot = Bot(BOT_TOKEN)
router = Router()

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–±–æ—Ä—É —á–∞—Å—É
def parse_time(time_str: str) -> int:
    time_mapping = {"m": 1, "h": 60, "d": 1440, "w": 10080}
    try:
        unit = time_str[-1]
        amount = int(time_str[:-1])
        return amount * time_mapping.get(unit, 0)
    except (ValueError, IndexError):
        return None

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
def format_time(minutes: int) -> str:
    target_time = datetime.now() + timedelta(minutes=minutes)
    return target_time.strftime("%d-%m-%Y %H:%M")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤
mate_words = []
try:
    with open('mate.txt', 'r', encoding='utf-8') as input_file:
        for line in input_file:
            word = line.strip()
            if word:
                mate_words.append(word)
except FileNotFoundError:
    logging.error("–§–∞–π–ª 'mate.txt' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –π–æ–≥–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤
@router.message(F.text)
async def check_mate_words(message: Message):
    text = message.text.lower()
    for word in mate_words:
        if word in text:
            await message.delete()
            await message.reply("‚ùå –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–µ —Å–ª–æ–≤–æ!")
            return

# –ö–æ–º–∞–Ω–¥–∞ /mute
@router.message(Command(commands=["mute"]))
async def mute_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º'—é—Ç–∏—Ç–∏.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∞—Å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `/mute 10m` –∞–±–æ `/mute 1h`.")
        return

    mute_duration = parse_time(args[1])
    if mute_duration is None:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/mute 10m`, `/mute 1h`, —Ç–æ—â–æ.")
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    mention = message.reply_to_message.from_user.mention_html()

    warnings[user_id] = warnings.get(user_id, 0) + 1
    current_warnings = warnings[user_id]

    target_datetime = datetime.now() + timedelta(minutes=mute_duration)
    target_time = format_time(mute_duration)

    try:
        with suppress(Exception):
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(),
                until_date=target_datetime.timestamp(),
            )
            await message.reply(
                f"üîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {mention} –±—É–ª–æ –∑–∞–º'—é—Ç–∂–µ–Ω–æ –¥–æ {target_time}. "
                f"<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {current_warnings}/3.</b>",
                parse_mode="HTML"
            )

        if current_warnings >= 3:
            await bot.send_message(
                admin_chat_id,
                f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {mention} –º–∞—î {current_warnings} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è! –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ –±–∞–Ω.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /unmute
@router.message(Command(commands=["unmute"]))
async def unmute_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–º'—é—á–∏—Ç–∏.")
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    mention = message.reply_to_message.from_user.mention_html()

    warnings.pop(user_id, None)

    try:
        with suppress(Exception):
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                ),
            )
            await message.reply(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {mention} –±—É–ª–æ —Ä–æ–∑–º'—é—á–µ–Ω–æ. –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Å–∫–∏–Ω—É—Ç—ñ.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /myaccount
@router.message(Command(commands=["myaccount"]))
async def my_account(message: Message):
    user = message.from_user
    full_name = user.full_name
    user_id = user.id

    member = await bot.get_chat_member(message.chat.id, user_id)
    status = "–ê–¥–º—ñ–Ω" if member.status in ["administrator", "creator"] else "–ü—ñ–¥–ø–∏—Å–Ω–∏–∫"

    response = (
        f"üë§ <b>–Ü–º'—è:</b> {full_name}\n"
        f"üÜî <b>–ú—ñ–π ID:</b> {user_id}\n"
        f"‚ö° <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
    )

    await message.reply(response, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /report
@router.message(Command(commands=["report"]))
async def report_message(message: Message):
    if message.reply_to_message:
        reported_user = message.reply_to_message.from_user
        reported_text = message.reply_to_message.text
        reporter = message.from_user

        admin_message = (
            f"‚ö†Ô∏è <b>–ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç!</b>\n"
            f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {reported_user.full_name} (ID: {reported_user.id})\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> {reported_text}\n"
            f"üì£ <b>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ —Ä–µ–ø–æ—Ä—Ç—É:</b> {reporter.full_name} (ID: {reporter.id})"
        )

        await bot.send_message(admin_chat_id, admin_message, parse_mode="HTML")
        await message.reply("‚úÖ –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç, —á–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    else:
        await message.reply("‚ùå –†–µ–ø–æ—Ä—Ç –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ª–∏—à–µ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
dp = Dispatcher()
dp.include_router(router)

# –ó–∞–ø—É—Å–∫
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())