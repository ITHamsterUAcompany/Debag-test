from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, ChatPermissions
from aiogram.filters import Command
from datetime import datetime, timedelta
from contextlib import suppress
import asyncio
from Bot_config import warnings, admin_chat_id, BOT_TOKEN

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(BOT_TOKEN)
router = Router()

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–±–æ—Ä—É —á–∞—Å—É
def parse_time(time_str: str) -> int:
    time_mapping = {"m": 1, "h": 60, "d": 1440, "w": 10080}
    try:
        unit = time_str[-1]
        amount = int(time_str[:-1])
        return amount * time_mapping.get(unit, 0)
    except (ValueError, IndexError):
        return None

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
def format_time(minutes: int) -> str:
    target_time = datetime.now() + timedelta(minutes=minutes)
    return target_time.strftime("%d-%m-%Y %H:%M")

# –ö–æ–º–∞–Ω–¥–∞ /mute
@router.message(Command('mute'))
async def mute_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º'—é—Ç–∏—Ç–∏.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∞—Å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `/mute 10m` –∞–±–æ `/mute 1h`.")
        return

    mute_duration = parse_time(args[1])
    if mute_duration is None:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/mute 10m`, `/mute 1h`, —Ç–æ—â–æ.")
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    mention = message.reply_to_message.from_user.mention_html()

    # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    warnings[user_id] = warnings.get(user_id, 0) + 1
    current_warnings = warnings[user_id]

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —á–∞—Å—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –º—é—Ç—É
    target_datetime = datetime.now() + timedelta(minutes=mute_duration)
    target_time = format_time(mute_duration)

    try:
        with suppress(Exception):
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(),
                until_date=target_datetime.timestamp(),
            )
            await message.reply(
                f"üîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {mention} –±—É–ª–æ –∑–∞–º'—é—Ç–∂–µ–Ω–æ –¥–æ {target_time}. "
                f"<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {current_warnings}/3.</b>",
                parse_mode="HTML"
            )

        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—É
        if current_warnings >= 3:
            await bot.send_message(
                admin_chat_id,
                f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {mention} –º–∞—î {current_warnings} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è! –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ –±–∞–Ω.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /unmute
@router.message(Command('unmute'))
async def unmute_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–º'—é—á–∏—Ç–∏.")
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    mention = message.reply_to_message.from_user.mention_html()

    # –°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
    warnings.pop(user_id, None)

    try:
        with suppress(Exception):
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                ),
            )
            await message.reply(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {mention} –±—É–ª–æ —Ä–æ–∑–º'—é—á–µ–Ω–æ. –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Å–∫–∏–Ω—É—Ç—ñ.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç–∏.")
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    mention = f"<b>{message.reply_to_message.from_user.full_name}</b>"

    try:
        with suppress(Exception):
            # –ó–∞–±–æ—Ä–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–∏—Å–∞—Ç–∏, –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–µ–¥—ñ–∞ —Ç–∞ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(),  # –í—Å—ñ –¥–æ–∑–≤–æ–ª–∏ —Å–∫–∏–Ω—É—Ç—ñ
            )
            await message.reply(
                f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {mention} –±—É–ª–æ –ø–æ–∑–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç <b>–Ω–∞–∑–∞–≤–∂–¥–∏</b>.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–±–∞–Ω–∏—Ç–∏.")
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    mention = f"<b>{message.reply_to_message.from_user.full_name}</b>"

    try:
        with suppress(Exception):
            # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ–∑–≤–æ–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                ),
            )
            await message.reply(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {mention} –±—É–ª–æ —Ä–æ–∑–±–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤—ñ–Ω –º–æ–∂–µ –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /report (–¥–ª—è –¥–≤–æ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤)
@router.message(Command("report"))
async def report_user(message: Message):
    if message.reply_to_message:
        reporter = f"{message.from_user.full_name} ({message.from_user.mention_html()})"
        reported = f"{message.reply_to_message.from_user.full_name} ({message.reply_to_message.from_user.mention_html()})"
        reason = " ".join(message.text.split()[1:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"

        await bot.send_message(f'<b>{message.from_user.full_name}</b> –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –†–µ–ø–æ—Ä—Ç, —á–µ–∫–∞–π—Ç–µ –≤—ñ–¥ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.', parse_mode='HTML')

        await bot.send_message(
            admin_chat_id,
            f"üö® {reporter} –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {reported}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode="HTML"
        )
    else:
        reporter = f"{message.from_user.full_name} ({message.from_user.mention_html()})"
        reason = " ".join(message.text.split()[1:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
        await bot.send_message(
            admin_chat_id,
            f"üö® {reporter} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ä–µ–ø–æ—Ä—Ç.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode="HTML"
        )


# –ö–æ–º–∞–Ω–¥–∞ /myaccount
@router.message(Command("myaccount"))
async def my_account(message: Message):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = message.from_user
    full_name = user.full_name
    user_id = user.id

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    member = await bot.get_chat_member(message.chat.id, user_id)
    status = "–ê–¥–º—ñ–Ω" if member.status in ["administrator", "creator"] else "–ü—ñ–¥–ø–∏—Å–Ω–∏–∫"

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    response = (
        f"üë§ <b>–Ü–º'—è:</b> {full_name}\n"
        f"üÜî <b>–ú—ñ–π ID:</b> {user_id}\n"
        f"‚ö° <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
    )

    await message.reply(response, parse_mode="HTML")



# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
dp = Dispatcher()
dp.include_router(router)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())